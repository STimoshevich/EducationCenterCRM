// <auto-generated />
using System;
using EducationCenterCRM.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EducationCenterCRM.DAL.Migrations
{
    [DbContext(typeof(EducationCenterDatabase))]
    [Migration("20211110074751_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("CoursesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("CourseTeacher");
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseLevel")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationWeeks")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicTitle")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TopicTitle");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseLevel = 0,
                            Description = "C# (си шарп) – объектно-ориентированный язык программирования, разработанный компанией Microsoft. Прямой интерес такой крупной корпорации к языку гарантирует, что он продолжит развиваться и находить применение в различных отраслях.C Sharp впитал лучшие качества, а также унаследовал особенности синтаксиса Java и C++. Применяется язык для веб-разработки, создания настольных и мобильных приложений. Если вы записались на курс по C# в Минске для того, чтобы научиться создавать web-проекты, то в дальнейшем вам необходимо освоить инструментарий .NET.Благодаря огромному количеству документации C# достаточно прост в изучении. А собственная среда разработки Visual Studio, готовые шаблоны, модули, процедуры делают язык комфортным в применении. После прохождения базового курса «Программирование на C#» можно выбрать направление для дальнейшего развития – заниматься промышленной разработкой ПО на ASP.NET или созданием мобильных игр на Unity.",
                            DurationWeeks = 18,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQnpoO8C2w4eMbJ1NaPLaJgrwC7smBhuwSSRA&usqp=CAU",
                            Price = 400.0,
                            Program = "1. Getting Started",
                            Title = "Introduction to C#",
                            TopicTitle = ".Net"
                        },
                        new
                        {
                            Id = 2,
                            CourseLevel = 0,
                            Description = "Язык программирования Java находится в числе лидеров во многих рейтингах: TIOBE – на основе подсчёта результатов поисковых запросов, PYPL – по анализу популярности в поисковике Google, IEEE – по комплексу показателей, таких как упоминание в проектах, статьях, вакансиях и других. Такая популярность обусловлена практически безграничными его возможностями и областями применения. Java не зависит от определённой платформы, его называют безопасным, портативным, высокопроизводительным и динамичным языком.Специалист, который знает этот язык, точно не останется без работы – уже более 7 миллиардов устройств по всему миру работают на Java. При этом те, кто освоит основы программирования на Java на курсах в Минске, могут развиваться в совершенно разных направлениях: заниматься enterprise-разработкой, промышленным программированием, разработкой мобильных приложений под Android, автоматизированным тестированием или программной роботизацией бизнес-процессов (RPA).",
                            DurationWeeks = 18,
                            ImageUrl = "https://www.osp.ru/FileStorage/DOCUMENTS_ILLUSTRATIONS/13230112/original.jpg",
                            Price = 400.0,
                            Program = "1. Getting Started",
                            Title = "Introduction to Java",
                            TopicTitle = "Java"
                        },
                        new
                        {
                            Id = 3,
                            CourseLevel = 1,
                            Description = "Платформа ASP.NET от компании Microsoft применяется для создания как простых web-сайтов, так и масштабных проектов – высоконадежных сетевых порталов, которые рассчитаны на многотысячную аудиторию. Благодаря безопасности и гибкости активно используется крупными компаниями: популярные сайты Microsoft, Lego, Volvo, Toyota, L'Oreal разработаны именно на ASP.NET.Сегодня ASP.NET – в авангарде web-разработки, а специалисты, работающие с этой технологией, находятся в числе самых востребованных в Беларуси. Как показывает статистика, выпускники IT-Academy, которые успешно оканчивают курсы по ASP.NET в Минске, быстрее находят работу.",
                            DurationWeeks = 40,
                            ImageUrl = "https://fiverr-res.cloudinary.com/images/t_main1,q_auto,f_auto,q_auto,f_auto/gigs/113201276/original/3adcfe36722f42c0a44f46a81f06064c9988fe3a/do-asp-dot-net-core-mvc-applications.png",
                            Price = 700.0,
                            Program = "1. Controllers and MVC",
                            Title = "ASP.NET",
                            TopicTitle = ".Net"
                        },
                        new
                        {
                            Id = 4,
                            CourseLevel = 1,
                            Description = "На современном движке Unity разработано более 50 процентов всех мобильных игр. Среди них – Albion Online, Pokemon GO, HearthStone, Inside и множество других крутых проектов. C помощью Unity можно разрабатывать приложения под любую платформу, само направление отличается относительно низким порогом вхождения, а еще имеет сильное комьюнити. Все это позволяет начинающему разработчику достаточно быстро освоиться в движке. Заинтересовались? Тогда записывайтесь на курсы по разработке игр на Unity в Минске.",
                            DurationWeeks = 30,
                            ImageUrl = "https://unity.com/sites/default/files/styles/social_media_sharing_twitter/public/2019-11/unity-logo-600x400%402x.jpg?h=10d202d3&itok=LgYBHKk9",
                            Price = 600.0,
                            Program = "1. What is Unity",
                            Title = "Unity",
                            TopicTitle = ".Net"
                        },
                        new
                        {
                            Id = 5,
                            CourseLevel = 1,
                            Description = "Данный специалист помогает максимально учесть цели и возможности организации в ходе работы над программными продуктами, даёт рекомендации по внедрению новых технологий с минимальными рисками. Именно бизнес-аналитик определяет потребности и предлагает эффективные решения, приносящие выгоды заинтересованным сторонам.",
                            DurationWeeks = 24,
                            ImageUrl = "https://analytics.infozone.pro/wp-content/uploads/2019/09/business_analysis_techniques-720x380.jpg",
                            Price = 1000.0,
                            Program = "",
                            Title = "Бизнес-анализ в области разработки ПО",
                            TopicTitle = "Business analysis"
                        },
                        new
                        {
                            Id = 6,
                            CourseLevel = 1,
                            Description = " Одним из важнейших направлений разработки информационных систем является метод визуальной интерпретации создаваемых решений, то есть моделирование. Грамотно выстроенная модель подобна хорошо проработанной топографической карте, которая с высокой степенью надежности гарантирует, что Вы не заблудитесь в хитросплетениях реальности, не всегда интерпретируемых однозначно.",
                            DurationWeeks = 10,
                            ImageUrl = "https://d3njjcbhbojbot.cloudfront.net/api/utilities/v1/imageproxy/https://coursera-course-photos.s3.amazonaws.com/db/00f7d7d51348529ad0323db833cd55/Cuadrado.png?auto=format%2Ccompress&dpr=1",
                            Price = 350.0,
                            Program = "",
                            Title = "Продвинутый курс по использованию нотации UML для практического анализа и визуального моделирования",
                            TopicTitle = "Business analysis"
                        },
                        new
                        {
                            Id = 7,
                            CourseLevel = 1,
                            Description = "Тестировщик-автоматизатор или QA Automation engineer – это специалист, который отвечает за качество произведенного продукта. Главная его задача – писать автоскрипты, которые будут проверять работу ПО. Это позволяет упростить процесс тестирования и сократить время на выполнение задания.",
                            DurationWeeks = 40,
                            ImageUrl = "https://grodno.in/source/photos/app/b_c291cmNlL3Bob3Rvcy8yMDIwLzAyLzEwL21ha2V0LW5vdnl5LmpwZw==_640_c1c1188269.jpg",
                            Price = 500.0,
                            Program = "1. What is Unity",
                            Title = "Автоматизированное тестирование на Java",
                            TopicTitle = "QA"
                        },
                        new
                        {
                            Id = 8,
                            CourseLevel = 1,
                            Description = "Python подходит для автоматизации лучше, чем другие языки программирования благодаря своим характеристикам: он интерпретируемый, простой в изучении и более лаконичный. Язык кроссплатформенный, поэтому, за редким исключением, все приложения, написанные на нём, будут работать под любой системой. Среди плюсов также обширный набор библиотек и активная поддержка сообществом, так что, скорее всего, нужный модуль для ваших нужд уже написан.",
                            DurationWeeks = 34,
                            ImageUrl = "https://techrocks.ru/wp-content/uploads/2017/09/python-learn-logo.jpg",
                            Price = 700.0,
                            Program = "",
                            Title = "Автоматизированное тестирование на Python",
                            TopicTitle = "QA"
                        },
                        new
                        {
                            Id = 9,
                            CourseLevel = 0,
                            Description = "Данный курс обеспечит получение базовых знаний, необходимых в повседневной жизни и профессиональной сфере.",
                            DurationWeeks = 50,
                            ImageUrl = "https://speakwell.co.in/wp-content/uploads/2017/08/3.jpg",
                            Price = 1000.0,
                            Program = "",
                            Title = "Английский для начинающих ",
                            TopicTitle = "English"
                        },
                        new
                        {
                            Id = 10,
                            CourseLevel = 2,
                            Description = "Данный курс сочетает в себе элементы теоретического знания с практическими деловыми навыками, что позволяет закрепить базовые знания, развить устную речь и расширить словарный запас",
                            DurationWeeks = 50,
                            ImageUrl = "https://is5-ssl.mzstatic.com/image/thumb/Purple127/v4/da/ef/da/daefda5e-2add-30ed-5689-9fd7f516b23b/source/512x512bb.jpg",
                            Price = 2000.0,
                            Program = "1. What is Unity",
                            Title = "Бизнес Английский ",
                            TopicTitle = "English"
                        },
                        new
                        {
                            Id = 11,
                            CourseLevel = 0,
                            Description = "Ещё несколько лет назад Photoshop был абсолютным лидером по популярности среди digital-дизайнеров. Но постепенно начали появляться и другие, более специализированные, графические редакторы – такие как Figma и Sketch. Эти инструменты созданы специально для разработки веб-проектов и мобильных приложений и намного лучше подходят для UI/UX дизайна.",
                            DurationWeeks = 10,
                            ImageUrl = "https://media.istockphoto.com/vectors/unified-modeling-language-acronym-business-concept-vector-id1272853458?k=20&m=1272853458&s=612x612&w=0&h=-7X5_-FpAZfAHPUQgmcBUjVz6ueByOnTfTcXySWSA7Q=",
                            Price = 200.0,
                            Program = "",
                            Title = "Обучение инструментам UI/UX дизайна",
                            TopicTitle = "Design"
                        },
                        new
                        {
                            Id = 12,
                            CourseLevel = 1,
                            Description = " UI/UX и web-дизайн ориентирован на создание внешне привлекательных, удобных в использовании и функциональных пользовательских интерфейсов. Для того, чтобы достичь успеха в этой сфере, необходимо обладать художественным вкусом, быть внимательным к деталям, понимать принципы компьютерной графики и визуального дизайна, уметь работать с инструментами (например, Adobe Photoshop, Adobe Illustrator, Sketch, Figma).",
                            DurationWeeks = 27,
                            ImageUrl = "https://thumbs.dreamstime.com/b/web-design-studio-web-site-responsive-design-presentation-computer-display-laptop-smart-phone-tablet-web-design-studio-web-175052877.jpg",
                            Price = 700.0,
                            Program = "1. What is Unity",
                            Title = "Веб-дизайн и дизайн мобильных интерфейсов",
                            TopicTitle = "Design"
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentCapacity")
                        .HasColumnType("int");

                    b.Property<int>("StudingType")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentCapacity = 5,
                            StudingType = 2,
                            Title = "first_group"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentCapacity = 5,
                            StudingType = 0,
                            Title = "second_group"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentCapacity = 5,
                            StudingType = 1,
                            Title = "third_group"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentCapacity = 5,
                            StudingType = 2,
                            Title = "fourth_group"
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationCenterUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EducationCenterUserId")
                        .IsUnique()
                        .HasFilter("[EducationCenterUserId] IS NOT NULL");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.StudingRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudingType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StudingRequests");
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.Topic", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Title");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Title = ".Net",
                            Description = ".Net (ASP.NET, Unity)"
                        },
                        new
                        {
                            Title = "Java",
                            Description = "Full-stack, JS, Spring"
                        },
                        new
                        {
                            Title = "Business analysis",
                            Description = "	 Бизнес-анализ как дисциплина тесно связан с анализом требований, но нацелен на определение изменений, которые необходимы для того, чтобы та или иная компания (организация) достигла своих стратегических целей. Эти изменения затрагивают стратегию, структуру, политику, процессы и информационные системы."
                        },
                        new
                        {
                            Title = "QA",
                            Description = "Тестирование дистанционно – это контроль качества программного продукта. Оно может быть ручным или автоматизированным (с помощью Java/Python). Это не разовая активность, а процесс, который длится на протяжении всего жизненного цикла программного обеспечения. Курсы тестировщиков ПО – быстрый старт к востребованной и высокооплачиваемой IT-профессии"
                        },
                        new
                        {
                            Title = "English",
                            Description = " Если вы хотите «войти в IT» и построить успешную карьеру в индустрии, то вам обязательно нужно знать английский язык. Не имеет значения, какое направление вы выберете и в какой компании в перспективе будете работать, так или иначе столкнетесь с необходимостью применять английский"
                        },
                        new
                        {
                            Title = "Design",
                            Description = " Программа по UI/UX и веб-дизайну включает в себя знакомство с инструментарием, обучение созданию визуальной составляющей IT-продуктов, проектированию сайтов, приложений и других сервисов. Вы научитесь воплощать свои идеи, разрабатывать привлекательный и функциональный дизайн, сможете оформить или пополнить портфолио качественными проектами."
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "93397388-d01a-46ef-a029-24e911e74553",
                            RoleId = "1cb03013-2a17-487d-9089-441c9d51172c"
                        },
                        new
                        {
                            UserId = "cf83c3bc-8e5d-477b-af52-29868ba738ec",
                            RoleId = "1cb03013-2a17-487d-9089-441c9d51172c"
                        },
                        new
                        {
                            UserId = "a45a0f56-df7c-43b5-a4fb-2dc5eeaef6ca",
                            RoleId = "1cb03013-2a17-487d-9089-441c9d51172c"
                        },
                        new
                        {
                            UserId = "86837c36-10b3-4af5-b53f-43331df6f6ad",
                            RoleId = "6ee8c136-0977-4454-b5bc-bc0d93192091"
                        },
                        new
                        {
                            UserId = "1df28a2d-bd21-4c77-b10c-d8631c7a0837",
                            RoleId = "6ee8c136-0977-4454-b5bc-bc0d93192091"
                        },
                        new
                        {
                            UserId = "f2f49e38-92ce-4275-9e1b-595984befeec",
                            RoleId = "6ee8c136-0977-4454-b5bc-bc0d93192091"
                        },
                        new
                        {
                            UserId = "f01a0643-8509-4d65-acfd-2f04d99e811a",
                            RoleId = "6ee8c136-0977-4454-b5bc-bc0d93192091"
                        },
                        new
                        {
                            UserId = "53b5ffde-9630-4258-87c3-9844dcb250c0",
                            RoleId = "6ee8c136-0977-4454-b5bc-bc0d93192091"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.Student", b =>
                {
                    b.HasBaseType("EducationCenterCRM.DAL.Entities.Person");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            EducationCenterUserId = "86837c36-10b3-4af5-b53f-43331df6f6ad",
                            GroupId = 1
                        },
                        new
                        {
                            Id = 5,
                            EducationCenterUserId = "1df28a2d-bd21-4c77-b10c-d8631c7a0837",
                            GroupId = 2
                        },
                        new
                        {
                            Id = 6,
                            EducationCenterUserId = "f2f49e38-92ce-4275-9e1b-595984befeec",
                            GroupId = 3
                        },
                        new
                        {
                            Id = 7,
                            EducationCenterUserId = "f01a0643-8509-4d65-acfd-2f04d99e811a",
                            GroupId = 1
                        },
                        new
                        {
                            Id = 8,
                            EducationCenterUserId = "53b5ffde-9630-4258-87c3-9844dcb250c0",
                            GroupId = 3
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.Teacher", b =>
                {
                    b.HasBaseType("EducationCenterCRM.DAL.Entities.Person");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToProfile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Teacher");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EducationCenterUserId = "93397388-d01a-46ef-a029-24e911e74553",
                            Bio = " teacher bio",
                            LinkToProfile = " teacher link"
                        },
                        new
                        {
                            Id = 2,
                            EducationCenterUserId = "cf83c3bc-8e5d-477b-af52-29868ba738ec",
                            Bio = " teacher bio",
                            LinkToProfile = " teacher link"
                        },
                        new
                        {
                            Id = 3,
                            EducationCenterUserId = "a45a0f56-df7c-43b5-a4fb-2dc5eeaef6ca",
                            Bio = " teacher bio",
                            LinkToProfile = " teacher link"
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.EducationCenterRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("EducationCenterRole");

                    b.HasData(
                        new
                        {
                            Id = "6ee8c136-0977-4454-b5bc-bc0d93192091",
                            ConcurrencyStamp = "2d59a720-2abb-4875-bedb-1d7f4fe4c1bb",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "41efbc7e-1687-4607-b380-2c46bb29d7a9",
                            ConcurrencyStamp = "79df6f06-0497-456f-bf07-19017ca7f00f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "eda16b48-8a72-41a6-bca3-c90f4a2210cf",
                            ConcurrencyStamp = "78b74c91-f84a-4cb6-ba40-c8f3033e086a",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "1cb03013-2a17-487d-9089-441c9d51172c",
                            ConcurrencyStamp = "71bf6e42-47eb-40c7-bb24-60c3f36f631a",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.EducationCenterUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("EducationCenterUser");

                    b.HasData(
                        new
                        {
                            Id = "93397388-d01a-46ef-a029-24e911e74553",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f63c075a-b1dc-4bc8-be18-0747602d34b8",
                            Email = "guilo-339@yopmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+375294632561",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d30ad9d5-addb-4262-bb03-1f98a7fc2e23",
                            TwoFactorEnabled = false,
                            UserName = "guilo-339@yopmail.com",
                            BirthDate = new DateTime(1990, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonLastName = "Никольский",
                            PersonName = "Артем"
                        },
                        new
                        {
                            Id = "cf83c3bc-8e5d-477b-af52-29868ba738ec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71948830-9784-4dac-86b7-3273a351eea0",
                            Email = "asdfwq@om.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+375294632561",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b2e5b22-4484-468b-b374-ec58e1a9019a",
                            TwoFactorEnabled = false,
                            UserName = "asdfwq@om.com",
                            BirthDate = new DateTime(1986, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonLastName = "Галкин",
                            PersonName = "Даниил"
                        },
                        new
                        {
                            Id = "a45a0f56-df7c-43b5-a4fb-2dc5eeaef6ca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df3eb42b-8bbf-4d45-9274-061c29b41d55",
                            Email = "qweewq@om.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+375296207583",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25d540c9-f1c1-43e7-89fb-8a74e364c089",
                            TwoFactorEnabled = false,
                            UserName = "qweewq@om.com",
                            BirthDate = new DateTime(1989, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonLastName = "Прокофьева",
                            PersonName = "Анастасия"
                        },
                        new
                        {
                            Id = "86837c36-10b3-4af5-b53f-43331df6f6ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79b34125-ce83-41af-a285-14d87b72b663",
                            Email = "gougeigubreudo-4919@yopmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+375291234561",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a64a46a-ff80-4ff4-9339-6bfe37cbade1",
                            TwoFactorEnabled = false,
                            UserName = "gougeigubreudo-4919@yopmail.com",
                            BirthDate = new DateTime(1990, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonLastName = "Дубченко",
                            PersonName = "Мирослав"
                        },
                        new
                        {
                            Id = "1df28a2d-bd21-4c77-b10c-d8631c7a0837",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57c4e40e-d825-4421-a511-401dff7e2be4",
                            Email = "croimappossoteu-1134@yopmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+375291265463",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "100c9cb1-97b7-405d-998e-e4b920d7863a",
                            TwoFactorEnabled = false,
                            UserName = "croimappossoteu-1134@yopmail.com",
                            BirthDate = new DateTime(1994, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonLastName = "Дзюба",
                            PersonName = "Гордей"
                        },
                        new
                        {
                            Id = "f2f49e38-92ce-4275-9e1b-595984befeec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d77b4a3-0366-4308-8301-0b48ffbec958",
                            Email = "kaumeusateileu-9412@yopmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+375299514564",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1201bb2-f08f-4270-879f-9462316625e3",
                            TwoFactorEnabled = false,
                            UserName = "kaumeusateileu-9412@yopmail.com",
                            BirthDate = new DateTime(1989, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonLastName = "Мирный",
                            PersonName = "Даниил"
                        },
                        new
                        {
                            Id = "f01a0643-8509-4d65-acfd-2f04d99e811a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f93cf030-f05a-4422-a13e-672aff5f9e07",
                            Email = "jeibrucrouquixi-1073@yopmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+375291235217",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eaea0449-dd38-4a22-bc5e-4bbbdb3f44b3",
                            TwoFactorEnabled = false,
                            UserName = "jeibrucrouquixi-1073@yopmail.com",
                            BirthDate = new DateTime(1998, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonLastName = "Тимошенко",
                            PersonName = "Чеслав"
                        },
                        new
                        {
                            Id = "53b5ffde-9630-4258-87c3-9844dcb250c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2b521e8-2ef7-4b83-9097-99e3d288c5c3",
                            Email = "cobrebaseido-4239@yopmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+375291239635",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f03be9de-0fa4-4d3e-9d8f-05dd230f1ddc",
                            TwoFactorEnabled = false,
                            UserName = "cobrebaseido-4239@yopmail.com",
                            BirthDate = new DateTime(1993, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonLastName = "Яловой",
                            PersonName = "Георгий"
                        });
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.HasOne("EducationCenterCRM.DAL.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationCenterCRM.DAL.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.Course", b =>
                {
                    b.HasOne("EducationCenterCRM.DAL.Entities.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicTitle");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.Group", b =>
                {
                    b.HasOne("EducationCenterCRM.DAL.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationCenterCRM.DAL.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.Person", b =>
                {
                    b.HasOne("EducationCenterCRM.DAL.Entities.EducationCenterUser", "EducationCenterUser")
                        .WithOne("Person")
                        .HasForeignKey("EducationCenterCRM.DAL.Entities.Person", "EducationCenterUserId");

                    b.Navigation("EducationCenterUser");
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.RefreshToken", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.Student", b =>
                {
                    b.HasOne("EducationCenterCRM.DAL.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Group");
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("EducationCenterCRM.DAL.Entities.EducationCenterUser", b =>
                {
                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
